import streamlit as st
import asyncio
import json
import os
from typing import List, Dict, TypedDict, Any, Optional, Union
from mcp.client.sse import SseClientTransport
from mcp import ClientSession, types
from groq import Groq
from dotenv import load_dotenv

# Carrega vari√°veis de ambiente (para GROQ_API_KEY no ambiente local)
# EM STREAMLIT CLOUD, ESTE ARQUIVO .env N√ÉO SER√Å USADO.
# As vari√°veis ser√£o lidas diretamente do ambiente de deploy.
load_dotenv()

# --- Configura√ß√µes ---
# A URL do seu servi√ßo MCP Server no Render
# Em Streamlit Cloud, essa URL ser√° passada via Secrets.
MCP_SERVER_URL = os.getenv("MCP_SERVER_URL") # REMOVI O VALOR DEFAULT LOCAL
if not MCP_SERVER_URL:
    st.error("Erro de configura√ß√£o: A vari√°vel de ambiente MCP_SERVER_URL n√£o est√° definida.")
    st.stop()

GROQ_API_KEY = os.getenv("GROQ_API_KEY")
if not GROQ_API_KEY:
    st.error("Erro de configura√ß√£o: A vari√°vel de ambiente GROQ_API_KEY n√£o est√° definida.")
    st.stop()

# --- Defini√ß√µes de Tipo (para ferramentas) ---
class ToolDefinition(TypedDict):
    type: str 
    function: Dict[str, Any]

# --- Inicializa√ß√£o de Cliente GROQ e Cliente MCP ---
class MCP_ChatBotClient:
    def __init__(self, mcp_server_url: str):
        self.mcp_server_url = mcp_server_url
        self.groq_client = Groq(api_key=GROQ_API_KEY)
        self.mcp_session: Optional[ClientSession] = None
        self.available_tools: List[ToolDefinition] = []
        self.tool_to_session: Dict[str, ClientSession] = {} 
        self.is_connected = False # Nova flag para rastrear o estado da conex√£o

    async def connect_to_mcp_server(self):
        """Conecta ao servidor MCP via Streamable HTTP (SSE)."""
        if self.is_connected and self.mcp_session:
            return # J√° conectado, evita reconex√µes desnecess√°rias

        try:
            st.info(f"Conectando ao servidor MCP em: {self.mcp_server_url}")
            transport = SseClientTransport(self.mcp_server_url)
            self.mcp_session = await transport.connect()
            
            st.success("Conectado ao servidor MCP com sucesso!")
            self.is_connected = True
            
            # Lista as ferramentas dispon√≠veis
            response = await self.mcp_session.list_tools()
            tools = response.tools
            
            for tool in tools:
                self.tool_to_session[tool.name] = self.mcp_session 
                self.available_tools.append({
                    "type": "function",
                    "function": {
                        "name": tool.name,
                        "description": tool.description,
                        "parameters": tool.inputSchema
                    }
                })
            st.info(f"Ferramentas MCP carregadas: {[t['function']['name'] for t in self.available_tools]}")

        except Exception as e:
            st.error(f"Erro ao conectar ou inicializar o servidor MCP: {e}")
            self.mcp_session = None 
            self.is_connected = False
            # Levantar a exce√ß√£o para que o Streamlit saiba que falhou na conex√£o inicial
            raise

    async def process_query(self, query: str):
        # Garante que a conex√£o seja feita se ainda n√£o estiver
        if not self.is_connected or not self.mcp_session:
            try:
                await self.connect_to_mcp_server()
            except Exception:
                st.error("N√£o foi poss√≠vel estabelecer conex√£o com o servidor MCP. Por favor, verifique a URL e a disponibilidade do servidor.")
                return

        messages = [{'role':'user', 'content':query}]
        
        chat_completion = self.groq_client.chat.completions.create(
            messages=messages,
            model="llama3-8b-8192", 
            tools=self.available_tools,
            tool_choice="auto",
            max_tokens=2024
        )

        process_query_loop = True
        response_placeholder = st.empty() 
        
        while process_query_loop:
            response_message = chat_completion.choices[0].message
            
            if response_message.content:
                response_placeholder.markdown(response_message.content) 
            
            tool_calls = response_message.tool_calls
            
            if tool_calls:
                messages.append(response_message) 
                
                for tool_call in tool_calls:
                    tool_name = tool_call.function.name
                    tool_args = json.loads(tool_call.function.arguments)
                    
                    st.info(f"Chamando ferramenta: {tool_name} com argumentos: {tool_args}")
                    
                    try:
                        result = await self.mcp_session.call_tool(tool_name, arguments=tool_args)
                        # Adapta a sa√≠da do CallToolResult para o formato esperado pelo modelo (string JSON)
                        # mcp.types.TextContent tem um m√©todo .dict() para serializar em dict
                        # Outros tipos de content (ImageContent) tamb√©m podem ter .dict() ou precisam ser tratados
                        tool_output_content = json.dumps([item.dict() if hasattr(item, 'dict') else vars(item) for item in result.content]) 

                        st.success(f"Ferramenta {tool_name} executada com sucesso. Resultado:")
                        st.json(json.loads(tool_output_content)) # Mostra o resultado JSON no Streamlit
                        
                        messages.append(
                            {
                                "tool_call_id": tool_call.id,
                                "role": "tool",
                                "content": tool_output_content 
                            }
                        )
                    except Exception as e:
                        st.error(f"Erro ao executar a ferramenta {tool_name}: {e}")
                        messages.append(
                            {
                                "tool_call_id": tool_call.id,
                                "role": "tool",
                                "content": json.dumps({"error": str(e), "tool_name": tool_name}) 
                            }
                        )
                
                chat_completion = self.groq_client.chat.completions.create(
                    messages=messages,
                    model="Llama3-70B-8192",
                    tools=self.available_tools,
                    tool_choice="auto",
                    max_tokens=2024
                )
            else:
                process_query_loop = False

    async def cleanup(self):
        if self.mcp_session:
            await self.mcp_session.close()

# --- Streamlit UI ---
st.set_page_config(page_title="Chatbot", page_icon="üí°")
st.title("Chatbot (Powered by MCP & Groq)")
st.caption("Pergunte sobre dados de energia da EIA. Ex: 'Quais s√£o as principais categorias de dados de energia na EIA?' ou 'Mostre-me os detalhes da rota 'electricity/retail-sales'.'")

# Inicializa o cliente chatbot e tenta conectar se n√£o estiver na sess√£o
if "chatbot_client" not in st.session_state:
    st.session_state.chatbot_client = MCP_ChatBotClient(MCP_SERVER_URL)
    # A conex√£o inicial √© feita aqui e armazenada na sess√£o.
    # Usamos st.session_state.connection_status para evitar tentativas repetidas de conex√£o na inicializa√ß√£o.
    st.session_state.connection_status = "pending"
    try:
        asyncio.run(st.session_state.chatbot_client.connect_to_mcp_server())
        st.session_state.connection_status = "connected"
    except Exception as e:
        st.session_state.connection_status = "failed"
        st.error(f"N√£o foi poss√≠vel iniciar o chatbot devido a um erro de conex√£o inicial: {e}")
        st.stop() # Parar o Streamlit se a conex√£o inicial falhar

# Exibir mensagem de conex√£o apenas se estiver pendente ou conectado
if st.session_state.connection_status == "pending":
    st.info("Conectando ao servidor MCP...")
elif st.session_state.connection_status == "connected" and not st.session_state.chatbot_client.available_tools:
     st.warning("Conectado ao servidor MCP, mas nenhuma ferramenta carregada. Verifique os logs do servidor.")

# Chat history
if "messages" not in st.session_state:
    st.session_state.messages = []

for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])

# User input
if st.session_state.get("connection_status") == "connected":
    if prompt := st.chat_input("Pergunte o que quiser..."):
        st.session_state.messages.append({"role": "user", "content": prompt})
        with st.chat_message("user"):
            st.markdown(prompt)

        with st.chat_message("assistant"):
            with st.spinner("Processando..."):
                # Roda o processamento da query de forma ass√≠ncrona
                asyncio.run(st.session_state.chatbot_client.process_query(prompt))
                # Note: O hist√≥rico do chat aqui est√° sendo populado incrementalmente.
                # Para uma experi√™ncia perfeita, voc√™ pode precisar de uma l√≥gica para
                # consolidar as sa√≠das intermedi√°rias (chamadas de ferramenta)
                # e adicionar apenas a resposta final do LLM ao `st.session_state.messages`.
                # Isso exigiria mais refatora√ß√£o do `process_query` para retornar o texto final.
else:
    st.warning("Chatbot n√£o dispon√≠vel. Verifique as configura√ß√µes de conex√£o.")

# Adicionar um bot√£o de reconex√£o para depura√ß√£o
if st.button("Tentar reconectar ao servidor MCP"):
    if st.session_state.get("connection_status") != "connected":
        st.session_state.connection_status = "pending"
        try:
            asyncio.run(st.session_state.chatbot_client.connect_to_mcp_server())
            st.session_state.connection_status = "connected"
            st.rerun() # For√ßa o Streamlit a redesenhar a p√°gina
        except Exception:
            st.session_state.connection_status = "failed"
            st.error("Falha ao reconectar. Verifique a URL do servidor e os logs.")

# L√≥gica para fechar a sess√£o MCP quando o aplicativo Streamlit √© fechado (ou reiniciado)
# Isso √© um pouco complicado com Streamlit, pois ele n√£o tem um lifecycle hook 'on_exit' confi√°vel.
# Para evitar vazamento de recursos, as sess√µes TCP persistentes do SSEClientTransport
# idealmente deveriam ser gerenciadas por um AsyncExitStack ou fechadas explicitamente.
# No contexto do Streamlit Cloud, onde os workers s√£o reiniciados periodicamente,
# as conex√µes antigas acabam sendo limpas, mas √© bom ter uma tentativa de limpeza.